" {{{ Pentadactyl configuration   -*- vimrc -*-
"
" Modified by Massimo Lauria 2014
"
" This configuration is supposed to be used on Linux and MacOSX.
" Unfortunately on MacOSX firefox does not get the Alt key. For this
" reason the basic keybindings do not use modifiers. This is probably
" a good idea in any case, since there is no much reason to use
" modifiers while browsing. Another consequences is that few actions
" cannot be performed with keyboards (like scrolling left/right).
" Those actions should be rare enough that resorting to mouse should
" not be a problem.
"
" The rationale is that disruptive actions should have double letter
" (rr, dd, uu, ...).
"
" }}}


" {{{ Options
"

set go=Cs
" No toolbar and scrollbars by default

set editor="emacsclient -c"
" C-i invokes editor in text fields

set history=100
" Command line and search patterns history

set incfind
" Show pattern matches as you type

set hlfind
" Hilight previous search pattern matches

set findcase=smart
" Ignore case in search unless pattern has uppercase chars

set showtabline=never
" No tabbar

set showstatuslinks=status
" Show destination links in 1=status line, 2=command line



set! browser.tabs.closeWindowWithLastTab=false
" Do not close the window if last tab is closed.


" Ex commands output in a new tab by default (prefs, addons...)
set newtab=all


" {{{ Key bindings

" Motion command
:map -builtin  i 4k
:map -builtin  k 4j
:map -builtin  I <PageUp>
:map -builtin  K <PageDown>
:map -builtin  <Left>  2h
:map -builtin  <Right> 2l
:map -builtin  <Up>    4k
:map -builtin  <Down>  4j
"------------------------------
:map -builtin  <Home> gg
:map -builtin  <End>  G
"------------------------------
:map -builtin  uu :back<CR>
:map -builtin  oo :forward<CR>
"------------------------------
:map -builtin  j :tabNext<CR>
:map -builtin  l :tabnext<CR>

" Buffer commands
"
" list and swap
:map -builtin  b          :buffer<SPACE>
:map -builtin  <C-x>b     :buffer<SPACE>
:map -builtin  <C-x><C-b> :buffer<SPACE>

" kill tabs
:map -builtin  d <Nop>
:map -builtin  <C-x>k :tabclose<CR>
:map -builtin  dd :tabclose<CR>
:map -builtin  rr :undo<CR>

" Avoid quit on C-q, and it's more suitable for Stop here
:map -builtin  q     :stop<CR>
:map -builtin  <C-q> :stop<CR>

" Undo close tab
:map -builtin  rr :undo<CR>

" Avoid quit commands
:map -builtin  Z <Nop>
:map -builtin  ZZ <Nop>

" Zoom 
:map -builtin  \- zo
:map -builtin  + zi
:map -builtin  = zi





" DISABLED Emacs navigation in command line and insert mode
"cmap <C-n> <Tab>
"cmap <C-p> <S-Tab>
"cmap <C-f> <Right>
"cmap <C-b> <Left>
"cmap <C-j> <CR>

" My own command line navigation.
cmap <A-j> <Left>
cmap <A-l> <Right>
cmap <A-i> <Up>
cmap <A-k> <Down>
" ------------------------------
cmap <A-u> <S-Tab>
cmap <A-o> <Tab>
cmap <A-Tab> <Tab>
" ------------------------------
cmap <C-j> <C-Left>
cmap <C-l> <C-Right>
cmap <C-i> <C-Up>
cmap <C-k> <C-Down>
" ------------------------------
cmap <C-u> <S-Tab>
cmap <C-o> <Tab>
cmap <C-Tab> <Tab>
" ------------------------------
cmap <PageUp> <Tab>
cmap <PageDown> <S-Tab>
" ------------------------------

" ------------------------------

" Use C-s and C-r for searching (n/N for next/prev as in less)
:map -builtin  <C-s> /
:map -builtin  <C-r> ?

" Copy the current URL to the clipboard with M-w
:map -builtin  <A-w> y
"
" Copy selected text to the clipboard with C-w
:map -builtin  <C-c> Y

" Paste the current clipboard selection to a new buffer with C-y
:map -builtin  <C-v> P

" Use current URL as a start for a new location with C-x C-v
:map -builtin  e O

" C-g as cancel (C-q is stop)
cmap <C-g> <Esc>
imap <C-g> <Esc>i
:map -builtin  <C-g> <Esc>

" Avoid Find dialog when canceling a started command, C-x C-g
:map -builtin  <C-x><C-g> <Esc>
"




" Open a link in a new tab with C-x t
" Open a link in the current tab with C-x l
" :map -builtin  <C-x>t :t<SPACE>
" :map -builtin  <C-x>l :o<SPACE>
" :map -builtin  t :t<SPACE>
" :map -builtin  l :o<SPACE>
:map -builtin  gg :o<SPACE>


" Open hints in new tab when Control is pressed,
" and in a new backgroud tab when Alt is.
:map -builtin  h f
:map -builtin  <A-h> ;b
:map -builtin  <C-h> ;t
:map -builtin  f <Nop>


" Open a link in a new tab with g
" Open a link in the current tab <A-g>
:map -builtin  <A-g><A-g> :t<SPACE>
:map -builtin   gg    :o<SPACE>
":map -builtin   tt    :t<SPACE>
":map -builtin   <A-g> :o<SPACE>
":map -builtin   <A-t> :t<SPACE>

"
" Extended hint mode with M-j
"  ; - focus link, a - save, y - copy link, O - :open query, T - for :tabopen ...
:map -builtin  , ;
:map -builtin  . :


" We can now also use F for Shift+b/f as back/forward
":map -builtin  F L
":map -builtin  B H

" Back with Backspace as well
map <BS> H

" Use C-h i to start help
:map -builtin  <C-h>i :help<CR>

" Record a key sequence into a macro with C-x (
:map -builtin  <C-x>( q

" Play a macro with C-x e
:map -builtin  <C-x>e @

" Set a mark at the cursor with C-x r m
:map -builtin  <C-x>rm m

" Jump to the mark in the current buffer with C-x r b
:map -builtin  <C-x>rb '

" C-v was pass-next, remap to bind with default keys
:map -builtin  <C-d> <C-v>
"
" C-x C-f starts the "Open File" dialog (C-x C-s is Save)
map <C-x><C-f> <C-d><C-o>
map <C-x><C-s> <C-d><C-s>


" Dialog selection with d
" map d :dialog<SPACE>

" Focus the address bar with C-l
" map <C-l> <C-d><C-l>

" Focus last used input field with C-c i
map <C-c>i gi

" Bookmarks search, and search by tag
" map <C-c>q :bmarks<SPACE>
" map <C-c>w :bmarks -tags=

" View source with C-c g, and
map <C-c>g gf
" ... in an editor with C-c e
map <C-c>e gF

" Open picture location with C-c p
map <C-c>p ;i

" Open context menu with C-c m
map <C-c>m ;c

" Open home directory with C-c f
map <C-c>f ~

" Go to home page with C-c h
map <C-c>h gh

" Go to parent directory with C-c u
map <C-c>u gu

" Go to the root of the website with C-c C-u
map <C-c><C-u> gU


" Mail/Rss commands
command -description "Mail reader"  mail :open www.gmail.com
command -description "News reader"  rss  :open digg.com/reader/
command -description "Mail reader"  fb   :open www.facebook.com
command -description "News reader"  tw   :open www.twitter.com


" Frequent websites
command -description "Open mail/rss/twitter input feeds" input :open https://diggg.com/reader/ | https://mail.google.com/mail/ | https://www.twitter.com
command -description "Open starred elements in RSS/Mail" star :open http://www.google.it/reader/view/user/-/state/com.google/starred | http://mail.google.com/mail/#starred


" Unfortunately bookmarklets cannot be saved in Delicious anymore...
" I have to resort to the classical firefox bookmarks, which have to
" be imported into each browser.
"
" Following commands do not work without the bookmarklets. I could
" embed then into the rc file (but then I could use then only in
" firefox + pentadactyl).

" Add a bookmark with C-c a (dialog)
:map -builtin  -description "Save on Delicious" -silent <C-c>a :open delicious-save<CR>
:map -builtin  -description "Save on Delicious" -silent <A-b>  :open delicious-save<CR>
command -description "Open Delicious preferences" dprefs :emenu Strumenti.Delicious Options

" Org-Mode commands (Implemented by bookmarklets)
command -description "Remember in Emacs"   org-remember    :open org-remember
command -description "Capture in Emacs"    org-capture     :open org-capture
command -description "Store Link in Emacs"  org-store-link  :open org-store-link
:map -builtin  -description "Remember in Emacs" -silent <F5> :org-remember<CR>


" Read Later commands (Implemented by bookmarklets)
command -description "Read later on Readability"  rl-readability  :open read-later-readability
command -description "Read later on Instapaper"   rl-instapaper   :open read-later-instapaper
command -description "View in Readability"        readability     :open text-readability
command -description "View in Instapaper"         instapaper      :open text-instapaper

" Defaults
command -description "Make page easy to read (instapaper)" read   :open text-instapaper
command -description "Read later (instapaper)"             later  :open read-later-instapaper
command -description "Send to Kindle (readability)"        kindle :open send-to-kindle-readability
